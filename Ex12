import java.util.List;

public class OddIntegerCounter {
    public static <T extends Number> int countOddIntegers(List<T> integerList) {
        int count = 0;
        for (T number : integerList) {
            if (number.intValue() % 2 != 0) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        // Example usage:
        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
        int oddCount = countOddIntegers(numbers);
        System.out.println("Number of odd integers: " + oddCount);
    }
}
2.
public class ArrayElementExchanger {
    public static <T> void exchangeElements(T[] array, int index1, int index2) {
        if (index1 >= 0 && index1 < array.length && index2 >= 0 && index2 < array.length && index1 != index2) {
            T temp = array[index1];
            array[index1] = array[index2];
            array[index2] = temp;
        } else {
            System.out.println("Invalid indices or indices are the same.");
        }
    }

    public static void main(String[] args) {
        // Example usage:
        Integer[] numbers = {1, 2, 3, 4, 5};
        System.out.println("Original array: " + Arrays.toString(numbers));
        
        exchangeElements(numbers, 1, 3);
        System.out.println("Array after exchanging elements: " + Arrays.toString(numbers));
    }
}
3.
import java.util.List;

public class MaxElementFinder {
    public static <T extends Comparable<T>> T findMaxElementInRange(List<T> list, int begin, int end) {
        if (begin < 0 || end >= list.size() || begin > end) {
            throw new IllegalArgumentException("Invalid range");
        }

        T maxElement = list.get(begin);
        for (int i = begin + 1; i <= end; i++) {
            T currentElement = list.get(i);
            if (currentElement.compareTo(maxElement) > 0) {
                maxElement = currentElement;
            }
        }
        return maxElement;
    }

    public static void main(String[] args) {
        // Example usage:
        List<Integer> numbers = List.of(3, 7, 2, 8, 5, 10, 1);
        int beginIndex = 2;
        int endIndex = 5;
        
        Integer maxElement = findMaxElementInRange(numbers, beginIndex, endIndex);
        System.out.println("Max element in the range [" + beginIndex + ", " + endIndex + "]: " + maxElement);
    }
}


question 2
public class GenericSearch {

    // Generic function to search for an element in an array
    public static <T> boolean searchElement(T[] array, T element) {
        for (T item : array) {
            if (item.equals(element)) {
                return true; // Element found
            }
        }
        return false; // Element not found
    }

    public static void main(String[] args) {
        // Example with an array of integers
        Integer[] intArray = {1, 2, 3, 4, 5};
        int searchInt = 3;
        if (searchElement(intArray, searchInt)) {
            System.out.println(searchInt + " found in the array.");
        } else {
            System.out.println(searchInt + " not found in the array.");
        }

        // Example with an array of strings
        String[] strArray = {"apple", "banana", "orange", "grape"};
        String searchString = "orange";
        if (searchElement(strArray, searchString)) {
            System.out.println(searchString + " found in the array.");
        } else {
            System.out.println(searchString + " not found in the array.");
        }
    }
}

