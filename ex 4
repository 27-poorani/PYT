1.Define an abstract class “car” with members reg_no, model, reg_date. Define two
subclasses of this class – “transportVehicles ” (validity_no, start_date, period) and
“privateVehicle ” (owner_name, owner_address). Define appropriate constructors. Create
n objects which could be of either transportVehicles or privateVehicle class by asking the
user’s choice. Display details of all “privateVehicle” objects and all “transportVehicles”
objects

import java.util.ArrayList;
import java.util.Scanner;


abstract class Car {
    protected String reg_no;
    protected String model;
    protected String reg_date;

    
    public Car(String reg_no, String model, String reg_date) {
        this.reg_no = reg_no;
        this.model = model;
        this.reg_date = reg_date;
    }


    abstract void displayDetails();
}


class TransportVehicles extends Car {
    private String validity_no;
    private String start_date;
    private String period;

    
    public TransportVehicles(String reg_no, String model, String reg_date, String validity_no, String start_date, String period) {
        super(reg_no, model, reg_date);
        this.validity_no = validity_no;
        this.start_date = start_date;
        this.period = period;
    }

    
    @Override
    void displayDetails() {
        System.out.println("Transport Vehicle Details:");
        System.out.println("Registration Number: " + reg_no);
        System.out.println("Model: " + model);
        System.out.println("Registration Date: " + reg_date);
        System.out.println("Validity Number: " + validity_no);
        System.out.println("Start Date: " + start_date);
        System.out.println("Period: " + period);
    }
}


class PrivateVehicle extends Car {
    private String owner_name;
    private String owner_address;


    public PrivateVehicle(String reg_no, String model, String reg_date, String owner_name, String owner_address) {
        super(reg_no, model, reg_date);
        this.owner_name = owner_name;
        this.owner_address = owner_address;
    }

    
    @Override
    void displayDetails() {
        System.out.println("Private Vehicle Details:");
        System.out.println("Registration Number: " + reg_no);
        System.out.println("Model: " + model);
        System.out.println("Registration Date: " + reg_date);
        System.out.println("Owner Name: " + owner_name);
        System.out.println("Owner Address: " + owner_address);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Car> carList = new ArrayList<>();

        while (true) {
            System.out.println("Choose the type of vehicle to create (1 for Transport Vehicle, 2 for Private Vehicle, 3 to exit):");
            int choice = scanner.nextInt();

            if (choice == 1) {
                
                scanner.nextLine();
                System.out.print("Enter Registration Number: ");
                String reg_no = scanner.nextLine();
                System.out.print("Enter Model: ");
                String model = scanner.nextLine();
                System.out.print("Enter Registration Date: ");
                String reg_date = scanner.nextLine();
                System.out.print("Enter Validity Number: ");
                String validity_no = scanner.nextLine();
                System.out.print("Enter Start Date: ");
                String start_date = scanner.nextLine();
                System.out.print("Enter Period: ");
                String period = scanner.nextLine();

                TransportVehicles transportVehicle = new TransportVehicles(reg_no, model, reg_date, validity_no, start_date, period);
                carList.add(transportVehicle);
            } else if (choice == 2) {
              
                scanner.nextLine(); 
                System.out.print("Enter Registration Number: ");
                String reg_no = scanner.nextLine();
                System.out.print("Enter Model: ");
                String model = scanner.nextLine();
                System.out.print("Enter Registration Date: ");
                String reg_date = scanner.nextLine();
                System.out.print("Enter Owner Name: ");
                String owner_name = scanner.nextLine();
                System.out.print("Enter Owner Address: ");
                String owner_address = scanner.nextLine();

                PrivateVehicle privateVehicle = new PrivateVehicle(reg_no, model, reg_date, owner_name, owner_address);
                carList.add(privateVehicle);
            } else if (choice == 3) {
                break;
            } else {
                System.out.println("Invalid choice. Please enter 1 for Transport Vehicle, 2 for Private Vehicle, or 3 to exit.");
            }
        }

        
        for (Car car : carList) {
            car.displayDetails();
            System.out.println();
        }
    }
}

output
Choose the type of vehicle to create (1 for Transport Vehicle, 2 for Private Vehicle, 3 to exit):
1
Enter Registration Number: ABC123
Enter Model: Truck
Enter Registration Date: 2023-09-16
Enter Validity Number: VT123
Enter Start Date: 2023-09-16
Enter Period: 1 year

Choose the type of vehicle to create (1 for Transport Vehicle, 2 for Private Vehicle, 3 to exit):
2
Enter Registration Number: XYZ456
Enter Model: Sedan
Enter Registration Date: 2023-09-16
Enter Owner Name: John Doe
Enter Owner Address: 123 Main Street

Choose the type of vehicle to create (1 for Transport Vehicle, 2 for Private Vehicle, 3 to exit):
3

List of Transport Vehicles:
Transport Vehicle Details:
Registration Number: ABC123
Model: Truck
Registration Date: 2023-09-16
Validity Number: VT123
Start Date: 2023-09-16
Period: 1 year

List of Private Vehicles:
Private Vehicle Details:
Registration Number: XYZ456
Model: Sedan
Registration Date: 2023-09-16
Owner Name: John Doe
Owner Address: 123 Main Street



2. Create an interface “CreditCardInterface” with methods to viewCreditAmount, viewPin,
changePin and payBalance. Create a class Customer (name, card number, pin,
creditAmount – initialized to 0). Implement methods of the interface
“CreditCardInterface” in Customer class. Create an array of customer objects and
perform the following actions.
 Pay Balance
 Change Pin


interface CreditCardInterface {
    void viewCreditAmount();
    void viewPin();
    void changePin(int newPin);
    void payBalance(double amount);
}


class Customer implements CreditCardInterface {
    private String name;
    private String cardNumber;
    private int pin;
    private double creditAmount;


    public Customer(String name, String cardNumber, int pin) {
        this.name = name;
        this.cardNumber = cardNumber;
        this.pin = pin;
        this.creditAmount = 0.0; // Initialized to 0
    }

    
    @Override
    public void viewCreditAmount() {
        System.out.println(name + "'s Credit Amount: $" + creditAmount);
    }

    @Override
    public void viewPin() {
        System.out.println(name + "'s PIN: " + pin);
    }

    @Override
    public void changePin(int newPin) {
        pin = newPin;
        System.out.println(name + "'s PIN changed successfully.");
    }

    @Override
    public void payBalance(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid payment amount.");
        } else if (amount > creditAmount) {
            System.out.println("Insufficient credit balance to make this payment.");
        } else {
            creditAmount -= amount;
            System.out.println(name + " has made a payment of $" + amount);
        }
    }
}

public class Main {
    public static void main(String[] args) {
      
        Customer[] customers = new Customer[3];
        customers[0] = new Customer("john", "1234567890123456", 1234);
        customers[1] = new Customer("Bob", "9876543210987654", 5678);
        customers[2] = new Customer("Charlie", "4567890123456789", 4321);

       
        customers[0].payBalance(50.0);
        customers[1].payBalance(30.0);
        customers[2].payBalance(20.0);

       
        for (Customer customer : customers) {
            customer.viewCreditAmount();
        }
   customers[0].changePin(5678);
        customers[1].changePin(1234);


        for (Customer customer : customers) {
            customer.viewPin();
        }
    }
}

output:
Insufficient credit balance to make this payment.
Insufficient credit balance to make this payment.
Insufficient credit balance to make this payment.
Alice's Credit Amount: $0.0
Bob's Credit Amount: $0.0
Charlie's Credit Amount: $0.0
Alice's PIN changed successfully.
Bob's PIN changed successfully.
Alice's PIN: 5678
Bob's PIN: 1234
Charlie's PIN: 4321
